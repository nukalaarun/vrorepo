<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item2" object-name="workflow:name=generic" id="4303308a-26e0-4901-9174-e3ccfbf7d79b" version="2.0.1" api-version="6.0.0" allowed-operations="vfe" editor-version="2.0" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Save To Catalog - new blueprint]]></display-name>
  <error-handler name="item21" throw-bind-name="errorMessage">
    <position y="149.23076923076923" x="243.07692307692332"/>
  </error-handler>
  <position y="10.0" x="50.0"/>
  <input>
    <param name="prefix" type="string">
      <description><![CDATA[the vm name prefix for building the new cloned VMs (templates) names]]></description>
    </param>
    <param name="existingDeploymentId" type="string"/>
    <param name="newBlueprintName" type="string">
      <description><![CDATA[The Unique name of the new blueprint the automation will create]]></description>
    </param>
    <param name="newBlueprintDescription" type="string">
      <description><![CDATA[The description to be added to the new Blueprint when created]]></description>
    </param>
  </input>
  <attrib name="blueprintID" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[the blueprint ID the deployment was provisioned from]]></description>
  </attrib>
  <attrib name="blueprintVersion" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[the blueprint version the deployment was provisioned from]]></description>
  </attrib>
  <attrib name="blueprintYaml" type="Text" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[the source blueprints YAML]]></description>
  </attrib>
  <attrib name="blueprintJson" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[source blueprints JSON representation]]></description>
  </attrib>
  <attrib name="deploymentResourcesData" type="Array/Properties" read-only="false">
    <value encoded="n"><![CDATA[[]]]></value>
    <description><![CDATA[used for storing the relevant data for cloned vms and here placement in the blueprints]]></description>
  </attrib>
  <attrib name="vmFolder" type="VC:VmFolder" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[The VM Folder object created for the blueprint during the automation]]></description>
  </attrib>
  <attrib name="newBlueprintYaml" type="Text" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[the YAML of the new blueprint]]></description>
  </attrib>
  <attrib name="newBlueprintJson" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[the JSON representation of the new blueprint]]></description>
  </attrib>
  <attrib name="snapshotName" type="string" read-only="false">
    <value encoded="n"><![CDATA[ss_for_vra_blueprint]]></value>
    <description><![CDATA[name of snashot for all new cloned vms to be used in vra blueprint to provision linked clones]]></description>
  </attrib>
  <attrib name="projectId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[the ID of the project the deployment exists under and that the new blueprint will be created in its context]]></description>
  </attrib>
  <attrib name="parentVmFolder" type="VC:VmFolder" read-only="false" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="parentVmFolder">
    <description><![CDATA[the folder under which each blueprint will have a folder with its templates]]></description>
  </attrib>
  <attrib name="newBlueprintID" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
    <description><![CDATA[the received ID of the new blueprint after it has been created]]></description>
  </attrib>
  <attrib name="errorMessage" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="cloudAccountID" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <attrib name="NsxtConfiguration" type="boolean" read-only="false" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="nsx-t-environemnt"/>
  <attrib name="linkedCloneConfiguration" type="boolean" read-only="false" conf-id="e147e593-b897-492b-bf82-d31fc1e22861" conf-key="configure-linked-clones"/>
  <workflow-note x="326.0" y="107.0" w="136.0" h="23.5" color="FFFFC0">
    <description><![CDATA[----- debug and test]]></description>
  </workflow-note>
  <workflow-item name="item2" out-name="item0" type="task">
    <display-name><![CDATA[Get Dep Data]]></display-name>
    <script encoded="false"><![CDATA[System.log("Retrieving Data from the source deployment")

// prepare variables
deploymentResourcesData = [];
var count = 1;

var jsonResponseBody = System.getModule("com.terasky.utils").getDeploymentObject(deploymentID);


// set source blueprint and project data output variables
blueprintVersion = jsonResponseBody.blueprintVersion;
blueprintID = jsonResponseBody.blueprintId;
projectId = jsonResponseBody.projectId;
var jsonResponseBody = System.getModule("com.terasky.utils").getDeploymentResources(deploymentID);


// traverse array of resource to find the vSphere VM components
for each (var resource in jsonResponseBody)
{
	if(resource.type == "Cloud.vSphere.Machine" && resource.properties.desktop == undefined)
	{
		// retrieve the cloud account iud for later use
        cloudAccountID = resource.properties.endpointId

        // build properties object to hold data to correlate the new VM, source VM and
        // resource data in order to clone the VMs and create the blueprint accordingly
        var vmData = new Properties();
        vmData.put("name",resource.name);
        vmData.put("type",resource.type);
        vmData.put("vmName",resource.properties.resourceName);
        if(resource.properties.instanceUUID != null && resource.properties.instanceUUID != "")
        {
            vmData.put("vmUuid",resource.properties.instanceUUID);
        }
        else
        {
            sdk = VcPlugin.findSdkConnectionForUUID(resource.properties.vcUuid)
            var vms = sdk.getAllVirtualMachines(null, resource.properties.resourceName)
            for each(var tempVM in vms)
            {
                if(tempVM.name == resource.properties.resourceName)
                {
                    vmData.put("vmUuid",tempVM.instanceId)
                }
            }
        }
        
        //Check If the VM is part of a group of blueprint component (count vm)
        if(resource.properties.count != undefined)
        {
            vmData.put("countVM",true);
        }
        else
        {
            vmData.put("countVM",false);
        }
        // make sure the new VM name is unique as VRA requires names to be unique within
        // a cloud account (vCenter) for it to be used as a template
        var nameOK = false;
        while(nameOK == false)
        {
            System.debug("Checking if the name " + prefix + "-" + count + " is available");
            nameOK = checkNameAvailability(prefix,count);
            System.debug("availability of the name is: " + nameOK);
            
            // if the name is not available raise the count variable and keep trying
            if(nameOK == false)
            {
                count++;
            }
        }
        vmData.put("tempName",prefix + "-" + count);
        
        // add the properties object to the output array with the data on all VMs relevant
        deploymentResourcesData.push(vmData);
		count++;
	}
}

System.log("All relevant data has been retrieved from the source deployment.");

// a function to check if a name is unique within all connected vCenters
function checkNameAvailability(prefix, number) {
  var tempName = prefix + "-" + number;
  
  // this is the quickest way as xpath query has not been optimized since VRO 7.1
  var vms = VcPlugin.getAllVirtualMachines(null, tempName);
  if(vms.length == 0)
  {
      return true;
  }  
  else
  {
      for each(vm in vms)
      {
          if(vm.name == tempName)
          {
              return false;
          }
      }
      return true;
  }
}]]></script>
    <in-binding>
      <bind name="prefix" type="string" export-name="prefix"/>
      <bind name="deploymentID" type="string" export-name="existingDeploymentId"/>
    </in-binding>
    <out-binding>
      <bind name="blueprintID" type="string" export-name="blueprintID"/>
      <bind name="blueprintVersion" type="string" export-name="blueprintVersion"/>
      <bind name="projectId" type="string" export-name="projectId"/>
      <bind name="deploymentResourcesData" type="Array/Properties" export-name="deploymentResourcesData"/>
      <bind name="cloudAccountID" type="string" export-name="cloudAccountID"/>
    </out-binding>
    <position y="20.0" x="240.0"/>
  </workflow-item>
  <workflow-item name="item4" type="end" end-mode="0">
    <in-binding/>
    <position y="272.3076923076923" x="41.53846153846153"/>
  </workflow-item>
  <workflow-item name="item0" out-name="item12" type="task">
    <display-name><![CDATA[Get BP YAML]]></display-name>
    <script encoded="false"><![CDATA[System.log("Retrieving the Source Blueprint")

// retrieving the blueprint and its relevant version 
// that the source deployment was provisioned from
var pathUri = "/blueprint/api/blueprints/" + blueprintID + "/versions/" + blueprintVersion;
response = System.getModule("com.terasky.utils").vraGetOperation(pathUri);
var jsonResponseBody = JSON.parse(response);

// the API response is a JSON with an embedded YAML of the blueprint which is escaped.
// in order to be able to convert the YAML to JSON we must un-escape the YAML
yamlString = jsonResponseBody.content;
blueprintYaml = System.getModule("com.terasky.utils").replaceBackslashNWithNewLine(yamlString);

System.log("The Source Blueprint YAML has been retrieved and formatted")
System.log("Converting the blueprint YAML now to JSON to enable data manipulation")]]></script>
    <in-binding>
      <bind name="blueprintID" type="string" export-name="blueprintID"/>
      <bind name="blueprintVersion" type="string" export-name="blueprintVersion"/>
    </in-binding>
    <out-binding>
      <bind name="blueprintYaml" type="Text" export-name="blueprintYaml"/>
    </out-binding>
    <position y="20.769230769230766" x="524.6153846153846"/>
  </workflow-item>
  <workflow-item name="item8" out-name="item18" type="task">
    <display-name><![CDATA[Create new BP]]></display-name>
    <script encoded="false"><![CDATA[System.log("New Blueprint JSON has been converted to YAML");
System.log("Creating the new blueprint now in the VRA");

// escaping the YAML so that it can be sent in the POST body JSON to VRA
var blueprintContent = System.getModule("com.terasky.utils").replaceNewLineWithBackslashN(newBlueprintYaml);
System.log("BP CONTENT: " + blueprintContent)
// Creating the new blueprint in the VRA
var pathUri = "/blueprint/api/blueprints";
var body = '{"name":"' + newBlueprintName + '","description":"' + newBlueprintDescription + '","content":\"' + blueprintContent + '\","projectId":"' + projectId + '","requestScopeOrg":"true"}';
System.log("BODY: " + body)
response = System.getModule("com.terasky.utils").vraPostOperation(pathUri,body);

// retrieving the new Blueprint ID for further system updates and tasks
var jsonBody = JSON.parse(response);
newBlueprintID = jsonBody.id;

System.log("The New Blueprint has been created");]]></script>
    <in-binding>
      <bind name="projectId" type="string" export-name="projectId"/>
      <bind name="newBlueprintName" type="string" export-name="newBlueprintName"/>
      <bind name="newBlueprintDescription" type="string" export-name="newBlueprintDescription"/>
      <bind name="newBlueprintYaml" type="Text" export-name="newBlueprintYaml"/>
    </in-binding>
    <out-binding>
      <bind name="newBlueprintID" type="string" export-name="newBlueprintID"/>
    </out-binding>
    <position y="282.3076923076923" x="519.6153846153846"/>
  </workflow-item>
  <workflow-item name="item9" out-name="item16" type="task">
    <display-name><![CDATA[Update Blueprint JSON]]></display-name>
    <script encoded="false"><![CDATA[System.log("Cloning and preparing the VMs is complete");
System.log("Updating the source blueprints JSON with the new VMs references");

// convert the JSON string to an object for easy manipulation
var blueprintJsonObject = JSON.parse(blueprintJson);

// traverse the array of properties created at the start of the workflow with VM details
for each(var component in deploymentResourcesData)
{
    var componentName = component.get("name");
    var newTemplateName = component.get("tempName");
    
    // if this is supposed to create a linked clone configuration we add the snapshot
    // to the image ref property. otherwise if full clone is being used we need to select
    // just the template vm's name
    if(linkedCloneConfiguration == true)
    {
        var imageRef = newTemplateName + "/" + snapshotName;
    }
    else
    {
        var imageRef = newTemplateName;
    }
    // update the image reference to the newly cloned VM
    blueprintJsonObject["resources"][componentName]["properties"]["imageRef"] = imageRef;

    // delete image setting if present on the object as we are using imageRef due to use of linked clones
    // and image cannot be used together with imageRef on the same resource in a blueprint
    delete blueprintJsonObject["resources"][componentName]["properties"]["image"];
}

// update blueprint common values
blueprintJsonObject.name = newBlueprintName;
blueprintJsonObject.version = "1.0.0";
blueprintJsonObject.formatVersion = 1;

// convert the JSON object back to a string
newBlueprintJson = JSON.stringify(blueprintJsonObject);

System.log("New Blueprint JSON has been prepared");
System.log("Converting the new Blueprint JSON to YAML in order to import to VRA")]]></script>
    <in-binding>
      <bind name="blueprintJson" type="string" export-name="blueprintJson"/>
      <bind name="snapshotName" type="string" export-name="snapshotName"/>
      <bind name="deploymentResourcesData" type="Array/Properties" export-name="deploymentResourcesData"/>
      <bind name="newBlueprintName" type="string" export-name="newBlueprintName"/>
      <bind name="linkedCloneConfiguration" type="boolean" export-name="linkedCloneConfiguration"/>
    </in-binding>
    <out-binding>
      <bind name="newBlueprintJson" type="string" export-name="newBlueprintJson"/>
    </out-binding>
    <position y="221.57894736842107" x="655.7894736842105"/>
  </workflow-item>
  <workflow-item name="item12" out-name="item17" type="task" script-module="com.terasky.utils/yaml2json_py">
    <display-name><![CDATA[Convert YAML To JSON]]></display-name>
    <script encoded="false"><![CDATA[//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").yaml2json_py(yamlTxt);
]]></script>
    <in-binding>
      <bind name="yamlTxt" type="Text" export-name="blueprintYaml"/>
    </in-binding>
    <out-binding>
      <bind name="actionResult" type="string" export-name="blueprintJson"/>
    </out-binding>
    <description><![CDATA[Add a note to the workflow schema.]]></description>
    <position y="20.0" x="660.0"/>
  </workflow-item>
  <workflow-item name="item15" out-name="item9" type="link" linked-workflow-id="76cfd0e2-2422-49de-bc5a-5a7d1a8592a2">
    <display-name><![CDATA[Clone and Snapshot All VMs]]></display-name>
    <in-binding>
      <bind name="vmFolder" type="VC:VmFolder" export-name="vmFolder">
        <description><![CDATA[VM Folder object in which to place the cloned VMs for the new blueprint]]></description>
      </bind>
      <bind name="allVmProperties" type="Array/Properties" export-name="deploymentResourcesData">
        <description><![CDATA[array of all the VMs properties needed for the cloning process]]></description>
      </bind>
      <bind name="snapshotName" type="string" export-name="snapshotName">
        <description><![CDATA[snapshot name to create on the newly cloned VMs for linked clone purposes]]></description>
      </bind>
      <bind name="NsxtConfiguration" type="boolean" export-name="NsxtConfiguration"/>
      <bind name="linkedCloneConfiguration" type="boolean" export-name="linkedCloneConfiguration"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[ ]]></description>
    <position y="158.42105263157896" x="655.7894736842105"/>
  </workflow-item>
  <workflow-item name="item16" out-name="item8" type="task" script-module="com.terasky.utils/json2yaml_py">
    <display-name><![CDATA[Convert JSON To YAML]]></display-name>
    <script encoded="false"><![CDATA[//Auto generated script, cannot be modified !
actionResult = System.getModule("com.terasky.utils").json2yaml_py(jsonTxt);
]]></script>
    <in-binding>
      <bind name="jsonTxt" type="string" export-name="newBlueprintJson"/>
    </in-binding>
    <out-binding>
      <bind name="actionResult" type="Text" export-name="newBlueprintYaml"/>
    </out-binding>
    <description><![CDATA[Add a note to the workflow schema.]]></description>
    <position y="280.0" x="660.0"/>
  </workflow-item>
  <workflow-item name="item17" out-name="item15" type="task">
    <display-name><![CDATA[Create VM Folder for Blueprint VMs]]></display-name>
    <script encoded="false"><![CDATA[System.log("Source Blueprint YAML has been converted to JSON")
System.log("Creating the vCenter VM Folder for the new blueprints templates")

// creating the folder for the to be cloned VMs. Each blueprint will have its own folder
vmFolder = parentVmFolder.createFolder(newBlueprintName)

System.log("The Blueprint Templates VM Folder has been created")
System.log("Moving on to cloning the source deployments VMs and prepairing them as linked clone templates")]]></script>
    <in-binding>
      <bind name="parentVmFolder" type="VC:VmFolder" export-name="parentVmFolder"/>
      <bind name="newBlueprintName" type="string" export-name="newBlueprintName"/>
    </in-binding>
    <out-binding>
      <bind name="vmFolder" type="VC:VmFolder" export-name="vmFolder"/>
    </out-binding>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="82.3076923076923" x="659.6923076923076"/>
  </workflow-item>
  <workflow-item name="item18" out-name="item19" type="task">
    <display-name><![CDATA[Create BP Version]]></display-name>
    <script encoded="false"><![CDATA[System.log("Creating a blueprint version and releasing it to the catalog");

// prepare variables for body of request
var changelog = "Created Via Save To Catalog Automation";
try
{
    var user = System.getContext().getParameter("__metadata_userName");
}
catch(e)
{
    System.warn("Could not get username from context. if run directly from VRO you can ignore this warning");
    var user = "undefined";
}
var description = "Created via Save To Catalog Automation. Based off of the deployment with the name: " + existingDeploymentName + " by the user: " + user;
var version = "1.0.0";
var release = true;

// create version of blueprint
var pathUri = "/blueprint/api/blueprints/" + newBlueprintID + "/versions";

var body = '{"changeLog":"' + changelog + '","description":"' + description + '","release":' + release + ',"version":"' + version + '"}';
System.getModule("com.terasky.utils").vraPostOperation(pathUri,body);

System.log("The New Blueprint version has been created and released");]]></script>
    <in-binding>
      <bind name="newBlueprintID" type="string" export-name="newBlueprintID"/>
      <bind name="existingDeploymentName" type="string" export-name="existingDeploymentId"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="282.3076923076923" x="378.7692307692308"/>
  </workflow-item>
  <workflow-item name="item19" out-name="item22" type="task">
    <display-name><![CDATA[Publish BP In SB]]></display-name>
    <script encoded="false"><![CDATA[System.log("Updating the Service Broker Catalog Source for the new Blueprint to be available");

// get all catalog sources the relevant project has access to
var pathUri = "/catalog/api/admin/sources?projectId=" + projectId + "&size=2000";
response = System.getModule("com.terasky.utils").vraGetOperation(pathUri);
var jsonBody = JSON.parse(response);

// travers the results and find the relevant catalog source id from the
// blueprint catalog source of the relevant project
for each(var catSource in jsonBody.content)
{
    if(catSource.typeId == "com.vmw.blueprint")
    {
        // needs to be split from previous if because the projectId value
        // does not exist on all catalog source types and will cause errors
        if(catSource.projectId == projectId)
        {
            var catSourceId = catSource.id;
            break;
        }
    }
}

// make sure a catalog source was found for blueprints and the relevant project
if(catSourceId == null)
{
    throw "No Catalog Source exists for Blueprints in the relevant project";
}

// get the relevant catalog source JSON via API
var pathUri = "/catalog/api/admin/sources/" + catSourceId;
body = System.getModule("com.terasky.utils").vraGetOperation(pathUri);


// ReSync The Catalog source via API to update Service Broker with the new Blueprint
var pathUri = "/catalog/api/admin/sources/";
System.getModule("com.terasky.utils").vraPostOperation(pathUri,body);

System.log("Save To Catalog Automation Completed!");]]></script>
    <in-binding>
      <bind name="projectId" type="string" export-name="projectId"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="282.3076923076923" x="253.69230769230768"/>
  </workflow-item>
  <workflow-item name="item20" throw-bind-name="errorMessage" type="end" end-mode="1">
    <in-binding/>
    <position y="149.23076923076923" x="503.0769230769231"/>
  </workflow-item>
  <workflow-item name="item21" out-name="item20" type="task">
    <display-name><![CDATA[Default Error Message]]></display-name>
    <script encoded="false"><![CDATA[System.error("The Workflow has caught an error. please find bellow the error.");
System.error("ERROR: " + errorMessage);
System.error("for any assistance needed please contact your cloud automation team for further investigation of the issue")]]></script>
    <in-binding>
      <bind name="errorMessage" type="string" export-name="errorMessage"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="159.23076923076923" x="333.0769230769233"/>
  </workflow-item>
  <workflow-item name="item22" out-name="item4" type="task">
    <display-name><![CDATA[Run Image Data Collection]]></display-name>
    <script encoded="false"><![CDATA[System.log("Running Image Data Collection on the relevant cloud account in order to sync the newly cloned VMs");

// Running image enumeration (data collection) on the relevant cloud account
var pathUri = "/iaas/api/cloud-accounts-vsphere/" + cloudAccountID + "/private-image-enumeration";
var body = '{}';
var response = System.getModule("com.terasky.utils").vraPostOperation(pathUri,body);
System.debug("Data collection has been kicked off. now polling till complete")

// polling data collection status
var jsonBody = JSON.parse(response);
var pathUri = jsonBody.selfLink;

var status = "INPROGRESS";

// poll the status every 5 seconds
while(status == "INPROGRESS")
{
    System.sleep(5000);
    var response = System.getModule("com.terasky.utils").vraGetOperation(pathUri);
    var jsonBody = JSON.parse(response);
    status = jsonBody.status;
    System.debug("Data collection status: " + status);
}

// validate the data collection didnt error out
if(status != "FINISHED")
{
    System.error("Data collection for the relevant cloud account failed.");
}
else
{
    System.log("Data collection has completed. The blueprint is now ready for consumption");
}]]></script>
    <in-binding>
      <bind name="cloudAccountID" type="string" export-name="cloudAccountID"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="282.3076923076923" x="128.6153846153846"/>
  </workflow-item>
  <presentation/>
</workflow>